<?php

namespace Sipai\UserManager;

use App\Models\User;
use Filament\Support\Assets\AlpineComponent;
use Filament\Support\Assets\Asset;
use Filament\Support\Assets\Css;
use Filament\Support\Assets\Js;
use Filament\Support\Facades\FilamentAsset;
use Filament\Support\Facades\FilamentIcon;
use Illuminate\Filesystem\Filesystem;
use Illuminate\Support\Facades\Auth;
use Livewire\Features\SupportTesting\Testable;
use Spatie\LaravelPackageTools\Commands\InstallCommand;
use Spatie\LaravelPackageTools\Package;
use Spatie\LaravelPackageTools\PackageServiceProvider;
use sipai\UserManager\Commands\UserManagerCommand;
use sipai\UserManager\Testing\TestsUserManager;

class UserManagerServiceProvider extends PackageServiceProvider
{
    public static string $name = 'user-manager';

    public static string $viewNamespace = 'user-manager';
    public function boot()
    {
        User::updated(function (User $user) {
            if ($user->id === Auth::id() && $user->isDirty('password')) {
                request()->session()->put([
                    'password_hash_' . auth()->getDefaultDriver() => $user->getAuthPassword(),
                ]);
            }
        });
        return parent::boot(); // TODO: Change the autogenerated stub
    }
    public function configurePackage(Package $package): void
    {
        /*
         * This class is a Package Service Provider
         *
         * More info: https://github.com/spatie/laravel-package-tools
         */
        $package->name(static::$name)
            ->hasCommands($this->getCommands())
            ->hasviews()
            ->hasMigrations()
            ->hasInstallCommand(function (InstallCommand $command) {
                $command
                    ->publishMigrations()
                    ->askToRunMigrations()
                    ->askToStarRepoOnGitHub('sipai/usermanager');
            });

        $configFileName = $package->shortName();

        if (file_exists($package->basePath("/../config/{$configFileName}.php"))) {
            $package->hasConfigFile();
        }

        if (file_exists($package->basePath('/../database/migrations'))) {
            $package->hasMigrations($this->getMigrations());
        }

        if (file_exists($package->basePath('/../resources/lang'))) {
            $package->hasTranslations();
        }

        if (file_exists($package->basePath('/../resources/views'))) {
            $package->hasViews(static::$viewNamespace);
        }
    }

    public function packageRegistered(): void {}

    public function packageBooted(): void
    {
        // Asset Registration
//        FilamentAsset::register(
//            $this->getAssets(),
//            $this->getAssetPackageName()
//        );
//
//        FilamentAsset::registerScriptData(
//            $this->getScriptData(),
//            $this->getAssetPackageName()
//        );

        // Icon Registration
//        FilamentIcon::register($this->getIcons());
//
//        // Handle Stubs
//        if (app()->runningInConsole()) {
//            foreach (app(Filesystem::class)->files(__DIR__ . '/../stubs/') as $file) {
//                $this->publishes([
//                    $file->getRealPath() => base_path("stubs/usermanager/{$file->getFilename()}"),
//                ], 'usermanager-stubs');
//            }
//        }

        // Testing
//        Testable::mixin(new TestsUserManager);
    }

    protected function getAssetPackageName(): ?string
    {
        return 'sipai/usermanager';
    }
    /**
     * @return array<class-string>
     */
    protected function getCommands(): array
    {
        return [
            UserManagerCommand::class,
        ];
    }

    /**
     * @return array<string>
     */
    protected function getRoutes(): array
    {
        return [];
    }

    /**
     * @return array<string>
     */
    protected function getMigrations(): array
    {
        return [
            'add_column_to_users_table',
        ];
    }
}
